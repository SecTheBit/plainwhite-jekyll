---
layout: post
title:  "DOM XSS"
date:   2020-10-24 21:03:36 +0530
categories: WebPentesting
---
Hello folks!!! hope you all are doing well , I am here to write a blog on DOM XSS , and i hope you all like it. We will start with understanding what is DOM , source and sinks and then move to the XSS part with some demonstration.


## What is DOM

Before Going to Dom xss we should understand what is DOM. Google Definition of DOM is:

"DOM stands for the Document Object Model. It’s the API for HTML and XML documents. We’re concerned with HTML when looking at what browsers are doing to render the screen."
So what i understand from this definition , DOM basically defines the logical structure of an html document and the way it is manipulated.

The following picture represents the basic structure tree of an html document or DOM of the webpage.

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/dom.png" align="middle">

## Difference between DOM and view-source

When i was learning about DOM xss , i got confused about the DOM and view-source of a page. I will explain the difference between them with an example.

So when you see view-source of a webpage , it is actually the source code of the reponse given by the server, but  you're looking at the DOM as it exists at the moment, which includes inline styles, parsing corrections, and other things that are the result of javascript running.

For example in the following figure i have made a simple a html webpage in which which i have by mistakenly closes the <p> tag by </h1> tag, lol.
<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/temp3.png" align="middle">

Now when you see the source code of the html page , it was same as the before, but the when you see the DOM , it was corrected there.
<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/temp4.png" align="middle">

We look at the DOM after:

1. HTML error correction by the browser.
2. DOM Manipulation by the javascript.

I think that clears all about the DOM and how it differs from the view-source.

## Sources and Sinks

Now other concepts are sources and sinks, these two are important before understanding about the DOM xss. 

Sources are basically the origin of the untrusted data which are given by the users. Some of the sources are location.hash, location.href,etc, and Sinks are the executable function where the data from the source are being executed.


In the following HTML page, in the script section, the location.hash.substr() are acting as the source and document.write is acting as the sinks.So whatever we write after hash ("#") part in the url , it will get stored in the variable x and get executed by the sink document.write and will be written on the html page after clicking on the button.

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/temp5.png" align="middle">
This was all about sources and sinks.

## DOM XSS

DOM XSS occurs when the web application takes the input from the source and mihshandles it in a way which causes it execution in the sink without proper sanitization, or in simple words we can say that web application writes the data to the dom without proper sanitization.


Generally in DOM XSS , you need to set your payload according to the DOM  , no need of source code here.

Now we will do some execercises on portswigger labs and i have also made couple of challenges, you can easily found it in my github repository.  

## Challenge-1

In the following challenge i have created a simple web page , and have uses the location.hash as source and window.location as sink.
<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/temp6" align="middle">

So whatever we write after the hash part , our new location will be set to that hash part.But as we can see that, the source is not sanitized anywhere, so we can send our payload there.

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/dom_xss.png" align="middle">


## Challenge-2

In the following challenge , i have used a vulnerable function "eval()" in the script section. 

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/temp7.png" align="middle">

NOTE: It is recommended not to use eval() function in your web application. I have used this function only to show about dom xss.

If you don't know about the eval function, search it on the web. Basically it will executes anything given to it.
So just giving our payload will do the work here.

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/challenge2.png" align="middle">


## Challenge-3

This challenge is on the portswigger labs.
On opening the web application , a search bar appears. So we will give it some input and see where our term is reflection in the DOM.
We observe that our term 'domxss' is appearing in the <img> tag .

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/challenge1.png" align="middle">

It was appearing there in the <img> tag due to the "trackSearch()" function. It is taking input from the source and writing it to the DOM without proper sanitization.

So first we need to come out of the <img> tag by using inverted commas , and then give a simple payload.
So our payload becomes "><script>alert(1)</script>

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/challenge1_1.png" align="middle">

## Challenge-4

In this challenge , on going to any product details we observe that in the dom , there is another parameter named as "storedId".

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/temp.png" align="middle">

And also this parameter is going from location.search source to document.write sink without sanitization. So , first we need to find where the parameter "storeId" is reflecting in the DOM and then crafting our payload according to that.
We observe that the parameter is appearing in the <search> tag. So our final payload will look like this:

<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/challenge2_2.png" align="middle">

## *Challenge-5*

In this challenge , on visitng the web page and obersving the DOM, we see that the "search" parameter is used in conjuction with inner.html


But here , we can not use our simple <script> tag , because when they are being used with inner.html they are easily blocked by modern browsers. So we need to use some othe tag like <img> here.
So our payload becomes:


<img src="https://raw.githubusercontent.com/SecTheBit/plainwhite-jekyll/gh-pages/assets/challenge_3.png" align="middle">

So this was all about DOM XSS. I hope you all enjoyed it.

                                                        HAPPY HACKING
                                                       
                                                       
